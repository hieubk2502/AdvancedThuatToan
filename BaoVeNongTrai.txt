 package bai7;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class BaoVeNongTrai {
	static int[][] arr = new int[701][701];
	static boolean[][] visited =new boolean[701][701];
	static int row;
	static int col;
	static boolean check;
	static int count;
	
	static int[] dx = {-1,-1,-1,0,0,1,1,1};
	static int[] dy = {-1,0,1,-1,1,-1,0,1};
	
	
	public static boolean checkBao(int i, int j){
		if (i>=1&&i<=row&&j>=1&&j<=col) {
			return true;
		}
		return false;
	}
	public static void resetVisited(){
		for (int i = 0; i < 701; i++) {
			for (int j = 0; j < 701; j++) {
				visited[i][j]=false;
			}
		}
	}
	public static void dfs(int x,int y){
		visited[x][y]=true;
		
		for (int i = 0; i < 8; i++) {
			int xx = x+ dx[i];
			int yy = y+ dy[i];
			if (checkBao(xx, yy)) {
				if (arr[xx][yy]>arr[x][y]) {
					check=false;
				}
				if (arr[xx][yy]==arr[x][y]&&!visited[xx][yy]) {
					dfs(xx, yy);
				}
			}
		}
	}

	public static void main(String[] args) throws FileNotFoundException {
		System.setIn(new FileInputStream("src/input.txt"));
		Scanner scanner = new Scanner(System.in);
		int T = scanner.nextInt();
		for (int tc = 1; tc <= T; tc++) {
			row = scanner.nextInt();
			col = scanner.nextInt();
			for (int i = 1; i <= row; i++) {
				for (int j = 1; j <=col; j++) {
					arr[i][j] =scanner.nextInt();
				}
			}
			resetVisited();
			count=0;
			for (int i = 1; i <=row; i++) {
				for (int j = 1; j <=col; j++) {
					if (!visited[i][j]) {
						check=true;
						dfs(i,j);
						if (check) {
							count++;
						}
					}
				}
			}
			System.out.println("#"+tc+" "+count);
		}
	}
}
//hugo ve nha
#include <iostream>
using namespace std;

int n, res;

int arr[2][30];
int soLinh[2][30], soCong;

void resetLinh(){
	soCong = 0;
	for(int i = 0; i < n; i++){
		soLinh[0][i] = 0;
		soLinh[1][i] = 0;
	}
}

int getArmy(){
	int sum = 0;
	for(int i = 0; i < soCong; i++){
		if(soLinh[1][i] < 3) sum += soLinh[0][i];
	}
	return sum;
}

void duongVeNha(int cong, int sum){
	if(sum >= res) return;
	if(cong == n){
		if(sum < res) res = sum;
		return;
	}
	duongVeNha(cong+1, sum+arr[1][cong]); // tra tien

	soLinh[0][soCong] = arr[0][cong];
	soLinh[1][soCong] = 0;
	soCong++;
	duongVeNha(cong+1, sum+arr[1][cong]*2);  //mua quan linh
	soLinh[0][soCong] = 0;
	soLinh[1][soCong] = 0;
	soCong--;

	// danh nhau
	int linh = getArmy();
	if(linh >= arr[0][cong]){
		//copy quan Linh
		int quanLinhCopy[2][30];
		for(int i = 0; i < soCong; i++){
			quanLinhCopy[0][i] = soLinh[0][i];
			quanLinhCopy[1][i] = soLinh[1][i];
		}
		//danh nhau
		int linhDich = arr[0][cong];
		for(int i = 0; i < soCong; i++){
			if(soLinh[1][i] < 3){
				if(soLinh[0][i] <= linhDich){
					linhDich -= soLinh[0][i];
					soLinh[0][i] = 0;
				}
				else{
					soLinh[0][i] -= linhDich;
					linhDich = 0;
				}
				soLinh[1][i]++;
			}
		}
		duongVeNha(cong+1, sum);  // backtrack
		for(int i = 0; i < soCong; i++){
			soLinh[0][i] = quanLinhCopy[0][i];
			soLinh[1][i] = quanLinhCopy[1][i];
		}
	}
}

int main(){
	freopen("input.txt", "r", stdin);
	int T; cin >> T;
	for(int tc = 1; tc <= T; tc++){
		cin >> n;
		for(int i = 0; i < n; i++){
			cin >> arr[0][i] >> arr[1][i];
		}
		resetLinh();
		res = 999999;
		duongVeNha(0, 0);
		cout << "#" << tc << " " << res << endl;
	}
	return 0;
}




package week4;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class HugoVeNha {
	static int T,soCua,idx;
	static int[] soBinhLinh= new int[21];
	static int[] soChiPhi = new int[21];
	static boolean[] visited = new boolean[21];
	static int[][] mangdem = new int[21][2];
	static int[][] mangdemCopy=new int[21][2];
	static int sum1,res;
	static int[] dem =new int[21];
	public static int tongSoQuan(){
		sum1=0;
		for (int i = 0; i < idx; i++) {
			if (mangdem[i][1]<3) {
				sum1+=mangdem[i][0];
			}
		}
		return sum1;
	}
	
	
	public static void bt(int cua,int sum){
		// dieu kien dung
		if (sum>res) {
			return;
		}
		if (cua==soCua) {
			if (sum<res) {
				res=sum;
			}
			return;
		}
		
		
		////// xu ly
		///pass
		bt(cua+1, sum+soChiPhi[cua]);
		
		
		// hire
		mangdem[idx][0]=soBinhLinh[cua];
		idx++;
		bt(cua+1, sum+2*soChiPhi[cua]);
		idx--;
		mangdem[idx][0]=0;
		
		
		// battle
		if (sum1>=soBinhLinh[cua]) {
			int b =soBinhLinh[cua];
			// copy sang
			for (int i = 0; i < idx; i++) {
				mangdemCopy[idx][0]=mangdem[idx][0];
				mangdemCopy[idx][1]=mangdem[idx][1];
			}
			// diet dich
			for (int i = 0; i < idx; i++) {
				if (mangdem[i][0]<b) {
					b-=mangdem[i][0];
					mangdem[i][0]=0;
				}else{
					mangdem[i][0]-=b;
					b=0;
				}
				mangdem[i][1]++;
			}
			//backtrack
			bt(cua+1, sum);
			// tru 1 tran chien cua nhung quan da tham gia con song
			for (int i = 0; i < idx; i++) {
				mangdem[i][0]=mangdemCopy[i][0];
				mangdem[i][1]=mangdemCopy[i][1];
			}
			
		}
	}
	
	
	public static void main(String[] args) throws FileNotFoundException{
		System.setIn(new FileInputStream("src/input.txt"));
		Scanner scanner =new Scanner(System.in);
		T= scanner.nextInt();
		for (int tc = 1; tc <= T ; tc++) {
			soCua =scanner.nextInt();
			for (int i = 1; i <=soCua; i++) {
				soBinhLinh[i]=scanner.nextInt();
				soChiPhi[i]=scanner.nextInt();
				visited[i]=false;
			}
			
			// xu ly
			// so binh linh-chiphi-time,sum
			res=99999;
			idx=0;
			bt(0,0);
			System.out.println("#"+tc+" "+res);
		}
		
		
	}
}
10
57 61 50 61
5 86 53 4 104 27 3 55 34 69 0
96 47 60 28
5 0 6 43 84 84 35 44 57 95 50
48 32 67 42
5 53 51 92 1 48 19 8 3 82 37
97 28 66 41
5 93 72 9 79 46 31 12 66 54 11
38 62 93 86
5 87 83 40 83 83 26 98 11 74 103
23 42 71 16
5 12 76 47 74 24 5 88 82 45 85
96 85 14 6
5 86 91 104 60 72 35 59 22 58 39
99 49 68 1
5 48 80 96 101 56 88 75 56 25 81
51 14 75 51
5 29 62 103 15 75 84 67 94 96 57
87 39 57 77
5 105 85 31 40 1 88 83 89 29 18
 
Case #1 393
Case #2 323
Case #3 267
Case #4 294
Case #5 281
Case #6 300
Case #7 219
Case #8 283
Case #9 295
Case #10 344
5 5

3 4 3 0 0

3 5 5 4 3

2 5 4 4 3

1 3 0 0 0

1 2 1 0 0

5 5

5 5 5 5 7

4 1 1 1 4

4 1 2 1 3

7 1 0 0 4

7 3 4 4 4

0 0

Output:

Case 1: Island never splits.

Case 2: Island splits when ocean rises 3 feet.

5 5

3 4 3 0 0

3 5 5 4 3

2 5 4 4 3

1 3 0 0 0

1 2 1 0 0

5 5

5 5 5 5 7

4 1 1 1 4

4 1 2 1 3

7 1 0 0 4

7 3 4 4 4

0 0

Output:

Case 1: Island never splits.

Case 2: Island splits when ocean rises 3 feet.
